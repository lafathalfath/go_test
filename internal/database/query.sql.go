// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :execresult
INSERT INTO products (
    name, content
) VALUES (
    ?, ?
)
`

type CreateProductParams struct {
	Name    string
	Content string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProduct, arg.Name, arg.Content)
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getOneProduct = `-- name: GetOneProduct :one
SELECT id, name, content, createdat FROM products
WHERE id = ? LIMIT 1
`

func (q *Queries) GetOneProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getOneProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.Createdat,
	)
	return i, err
}

const listAllProducts = `-- name: ListAllProducts :many
SELECT id, name, content, createdat FROM products
ORDER BY name
`

func (q *Queries) ListAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Content,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :execresult
UPDATE products 
SET name = ?, content = ?
WHERE id = ?
`

type UpdateProductParams struct {
	Name    string
	Content string
	ID      int64
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProduct, arg.Name, arg.Content, arg.ID)
}
